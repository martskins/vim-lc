set nocompatible
filetype off

"{{{ PLUGINS
call plug#begin()
Plug '~/dev/vim-lc'

" completion
Plug 'ervandew/supertab'
Plug 'roxma/nvim-yarp'
Plug 'ncm2/ncm2'
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-path'
Plug 'ncm2/ncm2-neosnippet'

call plug#end()
"}}}

filetype plugin indent on

set expandtab
set shiftwidth=4

"{{{ GENERAL
syntax on
set binary
set noshowmatch " this doesn't work on OSX, DisableMatchParen achieves the same
set nomodeline
set shortmess+=c
set more
set timeoutlen=1000 ttimeoutlen=0
set encoding=utf-8
set shell=/usr/local/bin/fish
set number relativenumber
set guifont=monospace
set nobackup
set hidden
set noswapfile
set belloff=all
set signcolumn=yes
set tabstop=2
set shiftwidth=2
set expandtab
set backspace=indent,eol,start
set autoindent
set pastetoggle=<leader>z
set clipboard=unnamed
set ignorecase
set history=100
set hlsearch
set showmatch
set wildmenu
set updatetime=300
set autoread
set ttyfast
set mouse=a
let mapleader = ','
let maplocalleader = "\\"
let g:ftplugin_sql_omni_key = '<C-j>'
let g:loaded_python_provider = 0
let g:loaded_ruby_provider = 0
let g:loaded_node_provider = 0
let g:ruby_host_prog='/Users/martin/.gem/ruby/2.7.0/bin/neovim-ruby-host'
let g:python3_host_prog='/usr/local/bin/python3'
" let g:python2_host_prog='/usr/bin/python'
let netrw_altfile = 1

" match paren is extremely slow on OSX, disable it
function! g:DisableMatchParen ()
    if exists(":NoMatchParen")
        :NoMatchParen
    endif
endfunction

augroup disable_match_paren
    autocmd!
    autocmd VimEnter * call DisableMatchParen()
augroup END

autocmd BufReadPost *.re setlocal filetype=reason
autocmd BufRead,BufNewFile go.mod set filetype=gomod
"}}}

" {{{ COMPLETION
set completeopt=noinsert,menuone,noselect
let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#enable_complete_done = 1

autocmd BufEnter * call ncm2#enable_for_buffer()
let g:ncm2#auto_popup = 1
imap <C-k>     <Plug>(neosnippet_expand_target)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
imap <expr><C-k> pumvisible() ?
	\ ncm2_neosnippet#expand_or("", 'n')
	\ : "\<Plug>(neosnippet_expand_or_jump)"
" }}}

" {{{ SUPERTAB
let g:SuperTabDefaultCompletionType = '<c-n>'
" }}}

nmap <silent>gd :VLCDefinition<CR>
nmap <silent>gi :VLCImplementation<CR>
nmap <silent>gr :VLCReferences<CR>
nmap <silent>ga :VLCCodeAction<CR>
nmap <silent>gl :VLCCodeLensAction<CR>
nmap <silent>R  :VLCRename<CR>
nmap <silent>K  :VLCHover<CR>
nmap <silent>F  :VLCFormatting<CR>
